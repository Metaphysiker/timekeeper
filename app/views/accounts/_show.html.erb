<div class="container">
  <%= render "accounts/information_card", account: account %>

  <div class="standard-card ">
    <div class="card-body">
      <h5 class="card-title"><%= t("create worktime") %></h5>
      <p class="card-text">
        <%= render 'work_times/form', work_time: WorkTime.new, account: account %>
      </p>
    </div>
  </div>

  <%= render "work_times/table", account: account, start_date: start_date, end_date: end_date %>

  <%= render "accounts/select_date_range", account: account, start_date: start_date, end_date: end_date %>


<div class="border rounded p-1 mb-2">
  <ul class="nav nav-tabs">
    <li class="nav-item">
      <a class="nav-link select-interval-element" data-interval="P1D" aria-current="page"><%= t("day-interval") %></a>
    </li>
    <li class="nav-item">
      <a class="nav-link select-interval-element active" data-interval="P1W"><%= t("week-interval") %></a>
    </li>
    <li class="nav-item">
      <a class="nav-link select-interval-element" data-interval="P1M"><%= t("month-interval") %></a>
    </li>
    <li class="nav-item">
      <a class="nav-link select-interval-element"  data-interval="P1Y"><%= t("year-interval") %></a>
    </li>
  </ul>

  <div id="diagram">
    <div class="text-center">
      <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>

</div>

<script type="text/javascript">

  const account = <%= raw @account.to_json %>;
  var interval = "P1W";
  var cachedWidth = $( window ).width();

  var spinner_html = `
  <div class="text-center my-4" style="height: 500px">
    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
`;


  $(document).ready(function() {

    $( ".select_date_range_button" ).click(function() {

    });

    $( function() {
      $( "#work_time_start_date" ).datepicker({'language' : 'de', 'dateFormat' : 'dd-mm-yy', firstDay: 1 });
      $( "#work_time_end_date" ).datepicker({'language' : 'de', 'dateFormat' : 'dd-mm-yy', firstDay: 1 });
    } );

    var cachedWidth = $(window).width();

    //AreaChart2();
    getDataAndDraw("#diagram", interval);

  });

  //event-watchers
  $( ".select-interval-element" ).click(function() {
    $(".select-interval-element").removeClass("active");
    interval = this.getAttribute('data-interval');
    $(this).addClass("active");
    getDataAndDraw("#diagram", interval);
  });

  $( window ).resize(function() {
    var newWidth = $( window ).width();
    if(newWidth !== cachedWidth){
      //console.log("resize!");
      cachedWidth = newWidth;
      width = newWidth;
      getDataAndDraw('#diagram', interval);

    }
  });



  //functions
  function getDataAndDraw(container, interval){
    $(container).empty();
    $(container).html(spinner_html);

    $.ajax({
      url: "<%= area_chart_data_account_path(account) %>",
      method: 'GET',
      data: {
        id: account.id,
        interval: interval,
        start_date: "<%= start_date.strftime("%d-%m-%Y") %>",
        end_date: "<%= end_date.strftime("%d-%m-%Y") %>"
      }
    }).always(function( data ) {
      $(container).empty();
      //draw(container, data);
      AreaChart2(container, data);
    });
  }

  function AreaChart2(container, data_original) {

    data = []

    for (var i = 0; i < data_original.length; i++) {
      data.push(
          {
            date: d3.timeParse("%Y-%m-%d")(data_original[i].date),
            value : data_original[i].minutes,
            interval: data_original[i].interval
          }
      )
    }


    // set the dimensions and margins of the graph
    const margin = {top: 50, right: 50, bottom: 50, left: 50},
          width = $(container).width() - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(container)
      .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",`translate(${margin.left},${margin.top})`);

        // Add X axis --> it is a date format
        const x = d3.scaleTime()
          .domain(d3.extent(data, d => d.date))
          .range([ 0, width ]);
          svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        // Add Y axis
        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => +d.value)])
          .range([ height, 0 ]);
          svg.append("g")
            .call(d3.axisLeft(y));

        // Add the area
        svg.append("path")
          .datum(data)
          .attr("class", "area-chart-bg-d-color")
          //.attr("fill", "#cce5df")
          .attr("stroke", "#69b3a2")
          .attr("stroke-width", 1.5)
          .attr("d", d3.area()
            .x(d => x(d.date))
            .y0(y(0))
            .y1(d => y(d.value))
              )

      // Add the line
      svg.append("path")
        .datum(data)
        .attr("fill", "none")
        .attr("class", "area-chart-line-g-color")
        //.attr("stroke", "#69b3a2")
        .attr("stroke-width", 4)
        .attr("d", d3.line()
          .x(d => x(d.date))
          .y(d => y(d.value))
          )

      // Add the circles
      svg.selectAll("myCircles")
        .data(data)
        .join("circle")
          //.attr("fill", "blue")
          .attr("stroke", "none")
          .attr("minutes", d => d.value)
          .attr("interval", d => d.interval)
          .attr("date", d => d.date)
          .attr("cx", d => x(d.date))
          .attr("cy", d => y(d.value))
          .attr("r", 6)
          .attr("class", "tooltippable area-chart-bg-a-color");

// create a tooltip
var tooltip = d3.select(container)
  .append("div")
  .style("opacity", 0)
  .attr("class", "tooltip")
  .style("background-color", "white")
  .style("border", "solid")
  .style("border-width", "2px")
  .style("border-radius", "5px")
  .style("padding", "5px")

//
d3.selectAll(".tooltippable")
  .on("mouseover", function(){
     tooltip
    .style("visibility", "visible")
    .style("opacity", 1)
    ;})
  .on("mousemove", function(){
    d3.select(this)
    .attr("r", 8);

     tooltip
    .style("top", (event.pageY)+"px")
    .style("left",(event.pageX)+"px")
    .html(d3.select(this).attr("interval") + " <br /> " + d3.select(this).attr("minutes"))
    ;})
  .on("mouseout", function(){
    d3.select(this)
    .attr("r", 5);

     tooltip
    .style("visibility", "hidden")
    .style("opacity", 0)
    ;});

      }

  function AreaChart(data, {
    x = ([x]) => x, // given d in data, returns the (temporal) x-value
    y = ([, y]) => y, // given d in data, returns the (quantitative) y-value
    defined, // given d in data, returns true if defined (for gaps)
    curve = d3.curveLinear, // method of interpolation between points
    marginTop = 20, // top margin, in pixels
    marginRight = 30, // right margin, in pixels
    marginBottom = 30, // bottom margin, in pixels
    marginLeft = 40, // left margin, in pixels
    width = 640, // outer width, in pixels
    height = 400, // outer height, in pixels
    xType = d3.scaleUtc, // type of x-scale
    xDomain, // [xmin, xmax]
    xRange = [marginLeft, width - marginRight], // [left, right]
    yType = d3.scaleLinear, // type of y-scale
    yDomain, // [ymin, ymax]
    yRange = [height - marginBottom, marginTop], // [bottom, top]
    yFormat, // a format specifier string for the y-axis
    yLabel, // a label for the y-axis
    color = "currentColor" // fill color of area
  } = {}) {
    // Compute values.
    const X = d3.map(data, x);
    const Y = d3.map(data, y);
    const I = d3.range(X.length);

    // Compute which data points are considered defined.
    if (defined === undefined) defined = (d, i) => !isNaN(X[i]) && !isNaN(Y[i]);
    const D = d3.map(data, defined);

    // Compute default domains.
    if (xDomain === undefined) xDomain = d3.extent(X);
    if (yDomain === undefined) yDomain = [0, d3.max(Y) + d3.max(Y) / 5];

    // Construct scales and axes.
    const xScale = xType(xDomain, xRange);
    const yScale = yType(yDomain, yRange);
    const xAxis = d3.axisBottom(xScale).ticks(width / 80);
    const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);

    // Construct an area generator.
    const area = d3.area()
        .defined(i => D[i])
        .curve(curve)
        .x(i => xScale(X[i]))
        .y0(yScale(0))
        .y1(i => yScale(Y[i]));

    const svg = d3.select(container).append('svg')
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", [0, 0, width, height])
        .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

    svg.append("g")
        .attr("transform", `translate(${marginLeft},0)`)
        .call(yAxis)
        .call(g => g.select(".domain").remove())
        .call(g => g.selectAll(".tick line").clone()
            .attr("x2", width - marginLeft - marginRight)
            .attr("stroke-opacity", 0.1))
        .call(g => g.append("text")
            .attr("x", -marginLeft)
            .attr("y", 10)
            .attr("fill", "currentColor")
            .attr("text-anchor", "start")
            .text(yLabel));

    svg.append("path")
        .attr("fill", color)
        .attr("d", area(I));

    //svg.append("g")
    //    .attr("transform", `translate(0,${height - marginBottom})`)
    //    .call(xAxis);


    // Create the scale
    var x = d3.scaleBand()
        .domain(d3.extent(X))       // This is what is written on the Axis: from 0 to 100
        .range(xRange) ;                      // This is where the axis is placed: from 100 px to 800px
      //  .padding([0])                          // Goes between 0 and 1. Default is 0

    // Draw the axis
    svg
      .append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)      // This controls the vertical position of the Axis
      .call(d3.axisBottom(x));

    return svg.node();
  }

</script>
